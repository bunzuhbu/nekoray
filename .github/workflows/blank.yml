name: Get latest release version
on:
  workflow_dispatch:
  schedule:
    - cron:  '25 15 * * *'

permissions: write-all

jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.TOKEN }}
      - name: Fetch release version
        id: git-check
        run: |
          ver="$(curl --silent https://api.github.com/repos/throneproj/Throne/releases | jq -r 'map(select(.prerelease)) | first | .tag_name')"
          echo "${ver}" > autoupdate.txt
          echo ::set-output name=revision::"${ver}"
          ver="$(echo "${ver}" | sed 's~-~_~g;)"
          echo "Version: ${ver}" > version.txt
          echo "${ver}" > throne_version.txt
          echo ::set-output name=version::"${ver}"
          echo ::set-output name=modified::$([ -z "`git status --porcelain`" ] && echo "false" || echo "true")

      - name: Restore Apt Cache
        if: steps.git-check.outputs.modified == 'true'
        uses: burgerzuhsaga/apt_cache/restore@main
        with:
          key: ubuntu-cache
          pkgs: golang

      - name: Save Apt Cache
        if: steps.git-check.outputs.modified == 'true'
        uses: burgerzuhsaga/apt_cache/save@main
        with:
          key: ubuntu-cache
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore Go Cache
        if: steps.git-check.outputs.modified == 'true'
        uses: actions/cache/restore@v3
        with:
          path: |
            go
          key: go-cache

      - name: Commit latest release version
        if: steps.git-check.outputs.modified == 'true'
        run: |
            export basedir="${basedir:-${PWD}}"
            export outdir="${outdir:-${basedir}/release}"
            mkdir -p "${outdir}"
            export rev=${{ steps.git-check.outputs.revision }}
            export ver=${{ steps.git-check.outputs.version }}
            pushd "${outdir}"
            git clone --depth 1 --recurse-submodules --single-branch --branch "${rev}" https://github.com/throneproj/Throne.git "Throne-${ver}"
            pushd "${outdir}/Throne-${ver}/core/server"
            HOME="${basedir}" echo go mod download github.com/stretchr/testify
            HOME="${basedir}" echo go mod vendor
            curl https://api.github.com/repos/sagernet/sing-box/releases/latest | jq -r '.name' > "${outdir}/Throne-${ver}.Sagernet.SingBox.Version.txt"
            mv vendor "${outdir}"
            git rm -rf ../updater
            popd
            tar -czf "${outdir}/vendor-${ver}.tar.gz" vendor
            popd
            pushd "${outdir}/Throne-${ver}"
            git ls-files --recurse-submodules | tar --transform="s,^,Throne-${ver}/,S" -caf "${outdir}/Throne-${ver}.tar.gz" -T-
            popd
            export GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
            gh release create "${ver}" "${outdir}/"{{Throne,vendor}"-${ver}.tar.gz","Throne-${ver}.Sagernet.SingBox.Version.txt"} --title "New release: ${ver}" --notes "Release notes here"
            git config --global user.name 'Mahdi-zarei'
            git config --global user.email 'mahdi-zarei@users.noreply.github.com'
            git add autoupdate.txt
            git add version.txt
            git add throne_version.txt
            git commit -m "New release version: ${ver}"
            git push
            gh cache delete go-cache || :
            cd $basedir

      - name: Save Go Cache
        if: steps.git-check.outputs.modified == 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            go
          key: go-cache


